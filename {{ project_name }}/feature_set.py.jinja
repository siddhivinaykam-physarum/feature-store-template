from feature_store_dsl.feature_api.feature_set import FeatureSet
from feature_store_dsl.feature_api.feature_set_decorators import feature_set
from feature_store_dsl.io.sinks.PostgresSink import PostgresSink
from feature_store_dsl.io.sources.PostgresSource import PostgresSource
from feature_store_dsl.types.aggregation import AggregationOperation
from feature_store_dsl.types.entity import BaseEntity
from feature_store_dsl.types.feature import Window, WindowType
from feature_store_dsl.types.source import EntityIdColumns, ExternalTable
from feature_store_dsl.feature_api.feature import EventFeature
import os

from openapi_client.models.data_type import DataType


source = PostgresSource(
    jdbc_url="jdbc:postgresql://localhost:5432/mydb",
    user="admin",
    password="secret",
    tables=""
)

sink = PostgresSink(
    jdbc_url="jdbc:postgresql://localhost:5432/mydb",
    user="admin",
    password="secret",
    schema="public"
)

entity = BaseEntity(
    name="user_id_updated_re_re",
    output_column="id",
    data_type=DataType.STRING
)

table = ExternalTable(
    source=source,
    entity_id_columns=[EntityIdColumns(
        entity=entity,
        entity_key_column="purchase_price"
    )],
    table_time_semantics=None,
    name="checkouts_updated",
    description=""
)

window = Window(window_type=WindowType.DAY_WINDOW, window_size=7)

@EventFeature(
        name="count_user_refunds",
        description="",
        entity_restrictions=[],
        aggregation=AggregationOperation.COUNT,
        table=table,
        window=window
)
def count_user():
    return "refund_amt"

cur_dir = os.getcwd()

@feature_set(
    orchestrator="emr",
    orchestrator_config_path=f"{cur_dir}/config/orchestrator.yml"
)
def sample_feature_set():
    return FeatureSet(
        name="{{ project_name }}",
        features=[count_user],
        table=table,
        description="",
        sinks=[sink]
    )

sample_feature_set.start()
